name: Release and Publish

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile

      - name: Run Unit Tests
        run: pnpm run test:ci

      - name: Run Build Tests
        run: pnpm run test:build

  release:
    name: Versioning & Release
    runs-on: ubuntu-latest
    needs: test  # Ensures tests pass before running
    timeout-minutes: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile

      - name: Create a Version & Changelog (if needed)
        run: pnpm changeset version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get New Version
        id: version
        run: echo "new_version=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Ensure CHANGELOG Exists
        run: touch CHANGELOG.md

      - name: Commit and Push Version Bump
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${GH_PAT}@github.com/HenriqueArtur/PipeLikeElixir.git
          git diff --quiet && echo "No changes to commit" || (git add . && git commit -m "ðŸ”– v${{ env.new_version }} [skip ci]" && git push)

  publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    needs: release  # Runs only if versioning is successful
    timeout-minutes: 2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile

      - name: Build Library
        run: pnpm run build

      - name: Publish to npm
        run: pnpm publish dist --no-git-checks --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.new_version }}
          name: Release v${{ env.new_version }}
          body_path: ./CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

